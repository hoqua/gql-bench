import { Module } from '@nestjs/common';
import * as path from 'node:path';
import { MessageModule } from './resources/message/message.module';
import { GraphQLModule } from '@nestjs/graphql';
import { MercuriusDriver, MercuriusDriverConfig } from '@nestjs/mercurius';
import * as EventEmitter from 'events';

import Redis from 'ioredis';

const redis = new Redis(12000);
const sub = new Redis(12000);
const pub = new Redis(12000);

class CustomPubSub {
  private readonly emitter: EventEmitter = new EventEmitter();

  async subscribe(topic, queue) {
    console.log('subscribed to', topic);
    let subscribed = true;

    const startReadingStream = async (topic) => {
      while (subscribed) {
        console.log('READING STREAM', topic);
        const text = await readMessages(topic)
        console.log('RESULT', text)
        this.publish(
          { topic, payload: { ['commentAdded']: { text } } },
          () => {}
        );
      }
    };

    const listener = async (value) => {
      queue.push(value);
    };

    const close = () => {
      subscribed = false;
      this.emitter.removeListener(topic, listener);
    };

    // check subscription on same topic
    this.emitter.on(topic, listener);
    queue.close = close;
    startReadingStream(topic).catch((_) => (subscribed = false));
  }

  publish(event, callback) {
    this.emitter.emit(event.topic, event.payload);
    callback();
  }
}

async function readMessages(topic: string) {
  // `results` is an array, each element of which corresponds to a key.
  // Because we only listen to one key (mystream) here, `results` only contains
  // a single element. See more: https://redis.io/commands/xread#return-value
  const results = await sub.xread('BLOCK', 0, 'STREAMS', topic, '$');
  const [key, messages] = results[0]; // `key` equals to "user-stream"
  console.log(messages);

  return messages.toString();
}

// const items = await redis.xrange('user-stream', '-', '+', 'COUNT', 40);
// console.log(items);

// setInterval(() => {
//   // `redis` is in the block mode due to `redis.xread('BLOCK', ....)`,
//   // so we use another connection to publish messages.
//   const pushToTopic = Math.floor(Math.random() * 3).toString();
//   console.log('pushing to', pushToTopic);
//   pub.xadd(
//     pushToTopic,
//     'MAXLEN',
//     '~',
//     '20',
//     '*',
//     'message id' + pushToTopic,
//     'message text pushed to topic'
//   );
// }, 1000);

@Module({
  imports: [
    GraphQLModule.forRoot<MercuriusDriverConfig>({
      driver: MercuriusDriver,
      autoSchemaFile: path.join(__dirname, './autogenerated-schema.gql'),
      graphiql: 'graphiql',
      routes: true,

      subscription: {
        pubsub: new CustomPubSub(),
      },
    }),
    MessageModule,
  ],
  controllers: [],
  providers: [],
})
export class AppModule {}
