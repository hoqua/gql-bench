{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///../../apps/api/src/app/app.module.ts","webpack:///../../apps/api/src/app/resources/message/entities/message.entity.ts","webpack:///../../apps/api/src/app/resources/message/message.module.ts","webpack:///../../apps/api/src/app/resources/message/message.resolver.ts","webpack:///../../apps/api/src/app/resources/message/message.service.ts","webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///external commonjs \"@nestjs/graphql\"","webpack:///external commonjs \"@nestjs/mercurius\"","webpack:///external commonjs \"@nestjs/platform-fastify\"","webpack:///external commonjs \"events\"","webpack:///external commonjs \"ioredis\"","webpack:///external commonjs \"mercurius\"","webpack:///external commonjs \"tslib\"","webpack:///external node-commonjs \"node:path\"","webpack:///webpack/bootstrap","webpack:///../../apps/api/src/main.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport * as path from 'node:path';\nimport { MessageModule } from './resources/message/message.module';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { MercuriusDriver, MercuriusDriverConfig } from '@nestjs/mercurius';\nimport * as EventEmitter from 'events';\n\nimport Redis from 'ioredis';\n\nconst redis = new Redis(12000);\nconst sub = new Redis(12000);\nconst pub = new Redis(12000);\n\nclass CustomPubSub {\n  private readonly emitter: EventEmitter = new EventEmitter();\n\n  async subscribe(topic, queue) {\n    console.log('subscribed to', topic);\n    let subscribed = true;\n\n    const startReadingStream = async (topic) => {\n      while (subscribed) {\n        console.log('READING STREAM', topic);\n        const text = await readMessages(topic)\n        console.log('RESULT', text)\n        this.publish(\n          { topic, payload: { ['commentAdded']: { text } } },\n          () => {}\n        );\n      }\n    };\n\n    const listener = async (value) => {\n      queue.push(value);\n    };\n\n    const close = () => {\n      subscribed = false;\n      this.emitter.removeListener(topic, listener);\n    };\n\n    // check subscription on same topic\n    this.emitter.on(topic, listener);\n    queue.close = close;\n    startReadingStream(topic).catch((_) => (subscribed = false));\n  }\n\n  publish(event, callback) {\n    this.emitter.emit(event.topic, event.payload);\n    callback();\n  }\n}\n\nasync function readMessages(topic: string) {\n  // `results` is an array, each element of which corresponds to a key.\n  // Because we only listen to one key (mystream) here, `results` only contains\n  // a single element. See more: https://redis.io/commands/xread#return-value\n  const results = await sub.xread('BLOCK', 0, 'STREAMS', topic, '$');\n  const [key, messages] = results[0]; // `key` equals to \"user-stream\"\n  console.log(messages);\n\n  return messages.toString();\n}\n\n// const items = await redis.xrange('user-stream', '-', '+', 'COUNT', 40);\n// console.log(items);\n\n// setInterval(() => {\n//   // `redis` is in the block mode due to `redis.xread('BLOCK', ....)`,\n//   // so we use another connection to publish messages.\n//   const pushToTopic = Math.floor(Math.random() * 3).toString();\n//   console.log('pushing to', pushToTopic);\n//   pub.xadd(\n//     pushToTopic,\n//     'MAXLEN',\n//     '~',\n//     '20',\n//     '*',\n//     'message id' + pushToTopic,\n//     'message text pushed to topic'\n//   );\n// }, 1000);\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot<MercuriusDriverConfig>({\n      driver: MercuriusDriver,\n      autoSchemaFile: path.join(__dirname, './autogenerated-schema.gql'),\n      graphiql: 'graphiql',\n      routes: true,\n\n      subscription: {\n        pubsub: new CustomPubSub(),\n      },\n    }),\n    MessageModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n","import { ObjectType, Field, Int } from '@nestjs/graphql';\n\n@ObjectType()\nexport class Message {\n  @Field(() => String, { nullable: true })\n  text?: string;\n}\n","  import { Module } from '@nestjs/common';\nimport { MessageService } from './message.service';\nimport { MessageResolver } from './message.resolver';\n\n@Module({\n  providers: [MessageResolver, MessageService],\n})\nexport class MessageModule {}\n","import {\n  Resolver,\n  Query,\n  Mutation,\n  Args,\n  Int,\n  Subscription,\n  Context,\n} from '@nestjs/graphql';\nimport { MessageService } from './message.service';\nimport { Message } from './entities/message.entity';\n\nimport { PubSub } from 'mercurius';\n\n@Resolver(() => Message)\nexport class MessageResolver {\n  constructor(private readonly messageService: MessageService) {}\n\n\n  @Subscription((returns) => Message)\n  commentAdded(\n    @Context('pubsub') pubSub: PubSub,\n    @Args('id', { type: () => Int }) id: number\n  ) {\n    console.log('RESOLVER EXECUTED', id);\n    return pubSub.subscribe(id.toString());\n  }\n\n  @Mutation(() => Boolean)\n  async addMessage(@Args('id') id?: String) {\n    await this.messageService.addMessage(id);\n    return true\n  }\n\n  @Query((returns) => Message, {nullable: true})\n  async readMessage(@Args('id') id?: String) {\n    return this.messageService.readMessage(id);\n  }\n}\n","import { Injectable } from '@nestjs/common';\n\nimport Redis from 'ioredis';\n\n\nconst pub = new Redis(12000);\n\n\n\nasync function readMessages(topic: string) {\n  // `results` is an array, each element of which corresponds to a key.\n  // Because we only listen to one key (mystream) here, `results` only contains\n  // a single element. See more: https://redis.io/commands/xread#return-value\n  console.log('READ BLOCK', 0, 'STREAMS', topic, '$')\n  const sub = new Redis(12000)\n  const results = await sub.xread('BLOCK', 0, 'STREAMS', topic, '$');\n  console.log(results)\n\n  const [key, messages] = results?.[0] || []; // `key` equals to \"user-stream\"\n\n  return messages?.toString();\n}\n\nconst getRandomNumberAsString = () =>\n  Math.floor(Math.random() * 1000).toString();\n\n@Injectable()\nexport class MessageService {\n  async addMessage(id) {\n    console.log('pushing to', id);\n    const pushToTopic = id || getRandomNumberAsString();\n    await pub.xadd(\n      pushToTopic,\n      'MAXLEN',\n      '~',\n      '20',\n      '*',\n      'message id' + pushToTopic,\n      'message text pushed to topic | message text pushed to topic | message text pushed to topic | message text pushed to topic'\n    );\n    return undefined;\n  }\n\n  async readMessage(id) {\n    const text = await readMessages(id || getRandomNumberAsString());\n\n    return { text };\n  }\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/graphql\");","module.exports = require(\"@nestjs/mercurius\");","module.exports = require(\"@nestjs/platform-fastify\");","module.exports = require(\"events\");","module.exports = require(\"ioredis\");","module.exports = require(\"mercurius\");","module.exports = require(\"tslib\");","module.exports = require(\"node:path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const adapter =  new FastifyAdapter({logger: {\n    level: 'debug',\n\n    }});\n  adapter.enableCors({\n    origin: true,\n  })\n\n  const app = await NestFactory.create<NestFastifyApplication>(\n    AppModule,\n    adapter\n  );\n  const globalPrefix = 'graphql';\n  const port = process.env.PORT || 4000;\n\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}